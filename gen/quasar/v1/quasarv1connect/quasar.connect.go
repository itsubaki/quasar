// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: quasar/v1/quasar.proto

package quasarv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/itsubaki/quasar/gen/quasar/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// QuasarServiceName is the fully-qualified name of the QuasarService service.
	QuasarServiceName = "quasar.v1.QuasarService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// QuasarServiceFactorizeProcedure is the fully-qualified name of the QuasarService's Factorize RPC.
	QuasarServiceFactorizeProcedure = "/quasar.v1.QuasarService/Factorize"
	// QuasarServiceSimulateProcedure is the fully-qualified name of the QuasarService's Simulate RPC.
	QuasarServiceSimulateProcedure = "/quasar.v1.QuasarService/Simulate"
)

// QuasarServiceClient is a client for the quasar.v1.QuasarService service.
type QuasarServiceClient interface {
	Factorize(context.Context, *connect.Request[v1.FactorizeRequest]) (*connect.Response[v1.FactorizeResponse], error)
	Simulate(context.Context, *connect.Request[v1.SimulateRequest]) (*connect.Response[v1.SimulateResponse], error)
}

// NewQuasarServiceClient constructs a client for the quasar.v1.QuasarService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQuasarServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) QuasarServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	quasarServiceMethods := v1.File_quasar_v1_quasar_proto.Services().ByName("QuasarService").Methods()
	return &quasarServiceClient{
		factorize: connect.NewClient[v1.FactorizeRequest, v1.FactorizeResponse](
			httpClient,
			baseURL+QuasarServiceFactorizeProcedure,
			connect.WithSchema(quasarServiceMethods.ByName("Factorize")),
			connect.WithClientOptions(opts...),
		),
		simulate: connect.NewClient[v1.SimulateRequest, v1.SimulateResponse](
			httpClient,
			baseURL+QuasarServiceSimulateProcedure,
			connect.WithSchema(quasarServiceMethods.ByName("Simulate")),
			connect.WithClientOptions(opts...),
		),
	}
}

// quasarServiceClient implements QuasarServiceClient.
type quasarServiceClient struct {
	factorize *connect.Client[v1.FactorizeRequest, v1.FactorizeResponse]
	simulate  *connect.Client[v1.SimulateRequest, v1.SimulateResponse]
}

// Factorize calls quasar.v1.QuasarService.Factorize.
func (c *quasarServiceClient) Factorize(ctx context.Context, req *connect.Request[v1.FactorizeRequest]) (*connect.Response[v1.FactorizeResponse], error) {
	return c.factorize.CallUnary(ctx, req)
}

// Simulate calls quasar.v1.QuasarService.Simulate.
func (c *quasarServiceClient) Simulate(ctx context.Context, req *connect.Request[v1.SimulateRequest]) (*connect.Response[v1.SimulateResponse], error) {
	return c.simulate.CallUnary(ctx, req)
}

// QuasarServiceHandler is an implementation of the quasar.v1.QuasarService service.
type QuasarServiceHandler interface {
	Factorize(context.Context, *connect.Request[v1.FactorizeRequest]) (*connect.Response[v1.FactorizeResponse], error)
	Simulate(context.Context, *connect.Request[v1.SimulateRequest]) (*connect.Response[v1.SimulateResponse], error)
}

// NewQuasarServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQuasarServiceHandler(svc QuasarServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	quasarServiceMethods := v1.File_quasar_v1_quasar_proto.Services().ByName("QuasarService").Methods()
	quasarServiceFactorizeHandler := connect.NewUnaryHandler(
		QuasarServiceFactorizeProcedure,
		svc.Factorize,
		connect.WithSchema(quasarServiceMethods.ByName("Factorize")),
		connect.WithHandlerOptions(opts...),
	)
	quasarServiceSimulateHandler := connect.NewUnaryHandler(
		QuasarServiceSimulateProcedure,
		svc.Simulate,
		connect.WithSchema(quasarServiceMethods.ByName("Simulate")),
		connect.WithHandlerOptions(opts...),
	)
	return "/quasar.v1.QuasarService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case QuasarServiceFactorizeProcedure:
			quasarServiceFactorizeHandler.ServeHTTP(w, r)
		case QuasarServiceSimulateProcedure:
			quasarServiceSimulateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedQuasarServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedQuasarServiceHandler struct{}

func (UnimplementedQuasarServiceHandler) Factorize(context.Context, *connect.Request[v1.FactorizeRequest]) (*connect.Response[v1.FactorizeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("quasar.v1.QuasarService.Factorize is not implemented"))
}

func (UnimplementedQuasarServiceHandler) Simulate(context.Context, *connect.Request[v1.SimulateRequest]) (*connect.Response[v1.SimulateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("quasar.v1.QuasarService.Simulate is not implemented"))
}
